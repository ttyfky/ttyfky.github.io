{"pageProps":{"slug":"jupyter-pandas-cheatsheet","postData":{"id":"jupyter-pandas-cheatsheet","contentHtml":"<h1 id=\"overview\">Overview</h1>\n<p>This article is a personal cheatsheet for frequent usecase of Jupyter Notebook (Colaboratory) and pandas.</p>\n<h1 id=\"spreadsheet-manipulation\">Spreadsheet Manipulation</h1>\n<h2 id=\"load-ss-values-to-dataframe\">Load s/s values to Dataframe</h2>\n<p>Connect to Google Spreadsheet from Colaboratory.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># Authorize.</span>\n<span class=\"hljs-keyword\">from</span> google.colab <span class=\"hljs-keyword\">import</span> auth\nauth.authenticate_user()\n\n<span class=\"hljs-keyword\">import</span> gspread\n<span class=\"hljs-keyword\">from</span> google.auth <span class=\"hljs-keyword\">import</span> default\ncreds, _ = default()\n\nsskey=<span class=\"hljs-string\">'YOUR_SS_KEY'</span> <span class=\"hljs-comment\"># Find value from URL.</span>\n\ngc = gspread.authorize(creds)\n\nworkbook = gc.open_by_key(offer_sskey)\nsheet = workbook.worksheet(<span class=\"hljs-string\">'SHEET_NAME'</span>)\n\n<span class=\"hljs-comment\"># Load all values as DataFrame.</span>\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\ndf = pd.DataFrame(sheet.get_all_values())\n</code></pre>\n<h1 id=\"pandas\">Pandas</h1>\n<h2 id=\"manipulation\">Manipulation</h2>\n<h3 id=\"put-first-row-to-header-of-dataframe\">Put first row to header of Dataframe</h3>\n<pre><code class=\"hljs language-python\">df = df.rename(columns=df.iloc[<span class=\"hljs-number\">0</span>])\n<span class=\"hljs-comment\"># Drop the header row from DataFrame.</span>\ndf = df.drop([<span class=\"hljs-number\">0</span>])\n</code></pre>\n<h3 id=\"join-two-dataframes\">Join two DataFrames</h3>\n<pre><code class=\"hljs language-python\">df3 = df.merge(df2, on=<span class=\"hljs-string\">'id'</span>)\n</code></pre>\n<h3 id=\"cast-type\">Cast type</h3>\n<p>Value types can be marked as <code>object</code>. In such case describe after grouping won't work well.<br>\nCasting the value as desirable type would be good.</p>\n<pre><code class=\"hljs language-python\">df[<span class=\"hljs-string\">'key'</span>] = df[<span class=\"hljs-string\">'key'</span>].astype(<span class=\"hljs-string\">\"int\"</span>)\n</code></pre>\n<h3 id=\"rename-column\">Rename column</h3>\n<pre><code class=\"hljs language-python\">df.rename(columns={<span class=\"hljs-string\">'key_original'</span>: <span class=\"hljs-string\">'key_renamed'</span>, <span class=\"hljs-string\">'before'</span>:<span class=\"hljs-string\">'after'</span>})\n</code></pre>\n<h3 id=\"set-index-to-column\">Set Index to column</h3>\n<pre><code class=\"hljs language-python\">df.reset_index(level=<span class=\"hljs-number\">0</span>)\n</code></pre>\n<h3 id=\"grouping\">Grouping</h3>\n<pre><code class=\"hljs language-python\">group = df.groupby([<span class=\"hljs-string\">'key'</span>])\ngroup.describe()\n</code></pre>","title":"Cheatsheet of Jupyter Notebook and Pandas","date":"2022-03-01","tags":["python","pandas","jupyter"],"description":"Frequently using expression in Jupyter Notebook and Pandas","published":false}},"__N_SSG":true}