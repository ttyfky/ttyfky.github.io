{"pageProps":{"slug":"understanding-data-lakehouse","postData":{"id":"understanding-data-lakehouse","contentHtml":"<h1 id=\"overview\">Overview</h1>\n<p>本記事では Data Lakehouse という概念についての調査メモ。\nLakehouse は Databrics が提唱している概念のようで、特定のベンダーが進めている話ならまだ重要視するほどでもなさそうだが\n<a href=\"http://cidrdb.org/cidr2021/papers/cidr2021_paper17.pdf\">論文</a>としても出ており、\nGCP でも紹介され(<a href=\"https://cloud.google.com/blog/ja/products/data-analytics/open-data-lakehouse-on-google-cloud\">2021-10-29</a>,\n<a href=\"https://cloud.google.com/blog/ja/products/data-analytics/google-cloud-data-cloud-summit\">2022-04-05</a>)、\nつい最近発表された <a href=\"https://cloud.google.com/bigquery/docs/biglake-intro\">BigLake</a>\nというプロダクトが作られる元となった考え方のようなので 2022-04 時点で Lakehouse はどういったものを指しどんな課題を解こうとしているのかということを整理する。</p>\n<h2 id=\"tldr\">TL;DR</h2>\n<ul>\n<li>これまでのデータ処理基盤は<a href=\"building-data-platform\">以前触れた</a>通り、Datalake -> Data Warehouse(DWH) -> Datamart のようなアーキテクチャが一般的</li>\n<li>従来の DWH や Datalake では分析や機械学習を行うためにはそれぞれ一定の制限がある</li>\n<li>Data Lakehouse は DWH や Datalake の良い点を活かして既存の制限を解決するアプローチ</li>\n</ul>\n<p>本記事では論文 <a href=\"http://cidrdb.org/cidr2021/papers/cidr2021_paper17.pdf\">Lakehouse: A New Generation of Open Platforms that Unify Data Warehousing and Advanced Analytics</a> (Ref1) での議論をベースに整理する。</p>\n<h1 id=\"従来のデータ分析基盤について\">従来のデータ分析基盤について</h1>\n<p>従来のデータ活用においては RDB などから必要なデータを取り出して構造化データを DWH として取り込む形が早くから始まった。<br>\nDWH は BI アプリケーションから扱いやすいが、 ML でのデータ活用ではテキスト、画像、動画、音声などの非構造化データを扱う需要があり、 DWH でのデータの持ち方では扱いづらい場面がある。</p>\n<p>そこで、生データを扱い非構造化データの保持も可能なものとして Datalake という層を作り、非構造化データを扱う処理は Datalake を利用することで処理が可能となった。\nしかし、Datalake はデータの管理が複雑で、トランザクション、データ品質の保証・一貫性・分離性などが欠如しており、データ処理パイプラインにおいてデータの追加と読み取りの同時実行などが難しいという制限がある。</p>\n<p><img src=\"https://databricks.com/wp-content/uploads/2020/01/data-lakehouse-new-1024x538.png\" alt=\"Datalakehouse Image\"><br>\n(Ref2 より)</p>\n<h2 id=\"従来のデータウェアハウスアーキテクチャの課題\">従来のデータウェアハウスアーキテクチャの課題</h2>\n<ul>\n<li>DWH は構造化データの利用には良いが非構造化データの利用には向いていない</li>\n<li>機械学習を行う場合非構造化データを用いる場合もあるため DWH だけでは不十分</li>\n<li>生データが前提の Datalake の概念によりではあらゆるデータを保持できるようになったが、データ処理パイプラインの作り方に制限がある\n<ul>\n<li>トランザクションは管理できない</li>\n<li>データ品質の保証の仕組みは無視されがち\n<ul>\n<li>データの重複など</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>異なる DWH にデータが有る場合にデータの移動が必要となる</li>\n<li>Datalake と DWH を分離したアーキテクチャでの複雑性\n<ul>\n<li>それぞれでセマンティクスの異なるデータタイプ</li>\n<li>SQL の方言の違い</li>\n<li>データのスキーマが異なる</li>\n</ul>\n</li>\n<li>データの鮮度</li>\n</ul>\n<h1 id=\"lakehouse\">Lakehouse</h1>\n<h2 id=\"lakehouse-の目指すもの\">Lakehouse の目指すもの</h2>\n<p>Lakehouse は、Datalake と Data Warehouse の優れた部分を組み合わせた、新しくオープンなアーキテクチャである。標準化されたシステムによって実現され DWH と同様のデータ構造とデータマネジメント機構を備えており、 Datalake のように安価なストレージに直接アクセスすることができる。</p>\n<ul>\n<li>Datalake において信頼できるデータマネジメントが可能\n<ul>\n<li>Datalake のレイヤーにおいてもトランザクションや ID の管理が可能</li>\n</ul>\n</li>\n<li>ML とデータサイエンスをサポート\n<ul>\n<li>ML の仕組みがファイルの直接読み込む事が可能</li>\n<li>DataFrames のようにデータを抽象化して操作が可能</li>\n</ul>\n</li>\n<li>SQL のパフォーマンス\n<ul>\n<li>Parquet や ORC のようなデータフォーマットを扱える</li>\n<li>直接データアクセス可能</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"lakehouse-が持つべきと考えられる機能\">Lakehouse が持つべきと考えられる機能</h3>\n<ul>\n<li>トランザクションのサポート\n<ul>\n<li>同時にデータの読み書きを行うデータパイプラインを許容するため ACID トランザクションをサポートし、特に SQL を用いたケースで複数のデータの読み書きがあったとしても一貫性の維持が可能</li>\n</ul>\n</li>\n<li>スキーマ適用及びガバナンス可能\n<ul>\n<li>スタースキーマ、スノーフレークスキーマのようにデータウェアハウスのスキーマアーキテクチャをサポートすることでレイクハウスはスキーマの適用・進化をサポート</li>\n<li>システムはデータの完全性を保証し、頑健性のあるガバナンス機能や監査機構が可能</li>\n</ul>\n</li>\n<li>BIのサポート\n<ul>\n<li>ソースデータに直接アクセスして BI が可能で、遅延を減らしデータの鮮度が保つ</li>\n<li>データレイクとデータウェアハウスでデータの二重持ちする必要が無いためコストを低減</li>\n</ul>\n</li>\n<li>計算リソースとストレージの分離\n<ul>\n<li>ストレージと計算リソースが異なるクラスターを用いることで同時接続ユーザー数の増加やデータ量の増加に応じてシステムをスケールアウト</li>\n</ul>\n</li>\n<li>オープンなストレージフォーマット\n<ul>\n<li>使用するストレージフォーマットは Parquet のようにオープンかつ標準化されたもの\n<ul>\n<li>TensorFlow や Spark MLlib は Parquet を読むことができるため、メタデータにクエリしどの Parquet ファイルを読むかの管理を行うだけで良い</li>\n</ul>\n</li>\n<li>機械学習、Python/R ライブラリのように多くのツールやエンジンに対する API を提供しデータへの直接アクセスが可能</li>\n</ul>\n</li>\n<li>様々なデータタイプをサポート\n<ul>\n<li>画像、動画、音声、準構造化データ、テキストを含む、新たなデータアプリケーションで必要となる様々なデータタイプの分析・精錬・格納に利用</li>\n</ul>\n</li>\n<li>様々なワークロードをサポート\n<ul>\n<li>データサイエンス、機械学習、SQLや分析に対応</li>\n<li>全て同じデータリポジトリを使用</li>\n</ul>\n</li>\n<li>エンドツーエンドのストリーミング\n<ul>\n<li>ストリーミングのサポートによりリアルタイムデータ処理専用のアプリケーションを別に持つ必要がなくなる</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"lakehouse-のアーキテクチャ\">Lakehouse のアーキテクチャ</h2>\n<p>Lakehouse は低コストで直接アクセス可能なストレージに基づくデータ管理システムであり、ACID トランザクションやインデックスなど従来の分析型DBMSの管理・パフォーマンス機能も備えるようにしたい。\nデータの直接アクセスが可能なためデータの独立性は放棄する。</p>\n<p>データはオブジェクトストレージ上で Parquet のような標準化されたフォーマットで持ち、トランザクションのサポートのためにメタデータレイヤーを持つ。\nDataFrames を利用できる API を持つことで R や Python の Pandas との連携が簡単にでき、また Spark SQL では宣言的に利用でき遅延実行できる。</p>\n<figure>\n<img src=\"lakehouse-architecture-sample.png\" alt=\"Lakehouseのアーキテクチャイメージ図\">\n</figure>\n(Ref1 より引用）\n<h3 id=\"データ管理のためのメタデータレイヤー\">データ管理のためのメタデータレイヤー</h3>\n<p>Lakehouse として最初に必要になるの Datalake ストレージのためのはメタデータレイヤーである。\n具体的には、<a href=\"https://iceberg.apache.org/\">Apache Iceberg</a> や <a href=\"https://hudi.apache.org/\">Apache Hudi</a>、<a href=\"https://delta.io/\">Delta Lake</a> などの\nファイルストレージ上に保存された Parquet/ORC フォーマットのファイルの管理を可能にするメカニズムを用いて、ACID トランザクションやバージョン管理などを可能にする。</p>\n<p>この領域は比較的新しく、今後更に最適化が進む可能性がある。挙げられたフレームワークもトランザクションログは 1 テーブルのみをサポートしているなど、高遅延であったり、ファイルが大きくなるといったオブジェクトストレージの制限の影響を受けている。</p>\n<h3 id=\"lakehouse-における-sql-パフォーマンス\">Lakehouse における SQL パフォーマンス</h3>\n<p>Datalake における最も大きな技術的な課題は、データの独立性を放棄した(直接アクセス可能なファイルで管理するため)上でどの様に SQL の最高のパフォーマンスを実現するのかという点である。</p>\n<p>SQL パフォーマンスを良くするアプローチとしては以下が考えられる。</p>\n<ul>\n<li>Caching\n<ul>\n<li>トランザクションのメタデータを処理ノードの SSD や RAM に置く</li>\n</ul>\n</li>\n<li>補助データ\n<ul>\n<li>カラム毎の最大最小値の統計情報を各ファイルごとに持つ</li>\n<li>Bloom filter ベースのインデックスを構築し選択した列でデータをスキップできるようにする</li>\n</ul>\n</li>\n<li>データの配置\n<ul>\n<li>Z-order<sup><a href=\"#user-content-fn-zorder\" id=\"user-content-fnref-zorder\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1</a></sup> などを用いてデータの局所性を表現する</li>\n</ul>\n</li>\n</ul>\n<p>直接アクセス可能で長期的にデータの保存が可能かつ高パフォーマンスな Lakehouse の仕組みの設計は現状も課題である。\n将来的にはこのユースケースに特化した新たなデータフォーマットの自体が必要かもしれないが、それを抜きにしてもここで上げたパフォーマンスを良くするための要素はいずれも向上の余地はある。</p>\n<h1 id=\"クラウドベンダーにおける-lakehouse\">クラウドベンダーにおける Lakehouse</h1>\n<h2 id=\"biglake---gcp\">BigLake - GCP</h2>\n<p>Lakehouse の調査をするきっかけになったのは Apr2022 の Google Data Cloud Summit 先駆けて <a href=\"https://cloud.google.com/blog/ja/products/data-analytics/google-cloud-data-cloud-summit\">BigLake についての記事</a>が発表されたからだった。</p>\n<p>記事の執筆時点では Preview 版であるが、 <a href=\"https://cloud.google.com/bigquery/docs/biglake-intro\">Introduction to BigLake tables</a> に BigLake の説明がある。<br>\n簡単に表現すると BigLake は BigQuery External Table 機能の拡張のようなものだ。\n基本的には BigQuery (以下 BQ) をインターフェイスとして、GCS や S3 などのオブジェクトストレージへアクセスするが、BQ がアクセスマネジメントを抽象化する。\nつまり、ユーザーのアクセス権限は BQ のテーブルに対してのみ考えたら良く、BQ を超えたレイヤー(i.e. 外部のストレージ)に対するアクセス権限をユーザーは意識する必要がない。</p>\n<p><img src=\"https://cloud.google.com/bigquery/images/biglake_arch.png\" alt=\"BigLake Image\"><br>\n(Ref4 より引用）</p>\n<p>現状はトランザクションへの言及などはなく、非構造化データとの連携もこの形で行いやすくなるとも思えないため、自分の理解ではこれまで触れてきた Lakehouse の目標には届いていない印象。\nBQ の場合はそもそも Dataflow や Serverless Spark 等の ETL のレイヤーから低遅延の Storage API を提供してデータを素早くよしなに扱って欲しいという思惑があるかもしれない。</p>\n<p>また、BQ は<a href=\"https://cloud.google.com/bigquery/docs/reference/standard-sql/transactions\">トランザクションのサポート</a>が Preview レベルではあるが開始されているため、\n今後外部テーブル関しての操作自体<sup><a href=\"#user-content-fn-bq-export\" id=\"user-content-fnref-bq-export\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2</a></sup>やトランザクション機能の追加があると Lakehouse の実現に近づくと思う。</p>\n<p><a href=\"https://cloud.google.com/blog/ja/products/data-analytics/getting-started-with-new-table-formats-on-dataproc\">Dataproc の新しいテーブル形式を使ってみる</a>や\n<a href=\"https://cloud.google.com/blog/topics/developers-practitioners/how-build-open-cloud-datalake-delta-lake-presto-dataproc-metastore\">How to build an open cloud datalake with Delta Lake, Presto &#x26; Dataproc Metastore</a> などの記事にもある通り、\nGCP 上での Delta Lake や Apache Iceberg の利用も可能だが、Dataproc (i.g. Hadoop) で Spark の利用が前提になっている。\nSpark/Hadoop クラスタの運用は手間がかかるので、Serverless Spark が GA とったことはこれらのフレームワークを利用する上でも良い発展に思える。</p>\n<h2 id=\"delta-lake---azure\">Delta Lake - Azure</h2>\n<p>Azure は Databrics と連携しており、Delta Lake についての<a href=\"https://docs.microsoft.com/ja-jp/azure/databricks/delta/\">厚めのドキュメント</a>がある。<br>\n日本語で細かく説明したドキュメントは貴重なので一読の価値あり。</p>\n<p><img src=\"https://docs.microsoft.com/ja-jp/azure/databricks/scenarios/media/what-is-azure-databricks/azure-databricks-overview.png\" alt=\"Azure Databrics\"><br>\n(Ref6 より引用）</p>\n<h2 id=\"aws\">AWS</h2>\n<p>AWS では <a href=\"https://aws.amazon.com/blogs/big-data/build-a-lake-house-architecture-on-aws/\">Build a Lake House Architecture on AWS</a>、\n<a href=\"https://aws.amazon.com/blogs/big-data/harness-the-power-of-your-data-with-aws-analytics/\">Harness the power of your data with AWS Analytics</a>、\n<a href=\"https://aws.amazon.com/blogs/architecture/how-to-accelerate-building-a-lake-house-architecture-with-aws-glue/\">How to Accelerate Building a Lake House Architecture with AWS Glue</a>\nなど、AWS 上で Lakehouse を構築する方法を説明した記事が多く見つかった。</p>\n<p>中でも <a href=\"https://aws.amazon.com/lake-formation/\">AWS Lake Formation</a> は Lakehouse 構築のためのキーとなるプロダクトに見え、S3 のファイルに対して ACID トランザクションを実現したりクエリによるアクセス速度の向上を実現でき、\n論文中で言及していたデータ管理のためのメタデータレイヤーを構築を可能にする。</p>\n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2020/12/08/harness-the-power-4.jpg\" alt=\"AWS Lakehouse Architecture\"><br>\n(Ref9 より引用）</p>\n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/08/18/Fig2-Glue.png\" alt=\"AWS Lakehouse Architecture\">\n(Ref10 より引用）</p>\n<h1 id=\"終わりに\">終わりに</h1>\n<p>本記事では Data Lakehouse の調査を行った。</p>\n<p>Lakehouse は従来の DWH や Datalake の仕組みに存在した制限を乗り越えるためのアプローチである。<br>\nDatalake は ACID トランザクションやインデックス等の DBMS のような仕組みを用いていたり、Parquet/OCR のような標準化されたファイルフォーマットを用いての直接ファイルアクセスが可能なことが期待される。</p>\n<p>各クラウドベンダーもそれぞれ Lakehouse に言及しており、今後のデータ処理基盤構築では意識していくべきものに思える。\nLakehouse の実現には Dalta Lake のようなフレームワークを用いるか、各クラウドベンダーが提供するプロダクトを用いると良さそうだが、ベンダー毎に実現可能なレベル感はまだ一定ではなく、今後の継続的なアップデートが期待される。</p>\n<h1 id=\"references\">References</h1>\n<ol>\n<li><a href=\"http://cidrdb.org/cidr2021/papers/cidr2021_paper17.pdf\">Lakehouse: A New Generation of Open Platforms that Unify Data Warehousing and Advanced Analytics</a></li>\n<li><a href=\"https://databricks.com/blog/2020/01/30/what-is-a-data-lakehouse.html\">What Is a Lakehouse?</a></li>\n<li><a href=\"https://cloudonair.withgoogle.com/events/summit-data-cloud-2022/watch?talk=s_databricks\">Rise of the Data Lakehouse in Google Cloud</a></li>\n<li><a href=\"https://cloud.google.com/bigquery/docs/biglake-intro\">Introduction to BigLake tables</a></li>\n<li><a href=\"https://cloudonair.withgoogle.com/events/summit-data-cloud-2022/watch?talk=vod_da1_s1_big_lake\">BigLake: Unify data warehouses and lakes with Google Cloud</a></li>\n<li><a href=\"https://docs.microsoft.com/ja-jp/azure/databricks/scenarios/what-is-azure-databricks-ws\">Databricks Data Science &#x26; Engineering とは</a></li>\n<li><a href=\"https://docs.microsoft.com/ja-jp/azure/databricks/delta/\">Delta Engine および Delta Lake ガイド</a></li>\n<li><a href=\"https://aws.amazon.com/blogs/big-data/build-a-lake-house-architecture-on-aws/\">Build a Lake House Architecture on AWS</a></li>\n<li><a href=\"https://aws.amazon.com/blogs/big-data/harness-the-power-of-your-data-with-aws-analytics/\">Harness the power of your data with AWS Analytics</a></li>\n<li><a href=\"https://aws.amazon.com/blogs/architecture/how-to-accelerate-building-a-lake-house-architecture-with-aws-glue/\">How to Accelerate Building a Lake House Architecture with AWS Glue</a></li>\n</ol>\n<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-zorder\">\n<p>余談だが私の修士の研究では Z-order で局所性を考慮したアプローチをしていたので思い入れがある <a href=\"#user-content-fnref-zorder\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n<li id=\"user-content-fn-bq-export\">\n<p><a href=\"https://cloud.google.com/bigquery/docs/exporting-data#exporting_data_stored_in\">SQL による書き込みは可能</a> <a href=\"#user-content-fnref-bq-export\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n</ol>\n</section>","title":"Data Lakehouse を理解する","date":"2022-04-10","tags":["data","dwh","lakehouse"],"description":"Data Lakehouse についての概要説明とクラウドベンダーごとのアプローチについて","published":true,"company":true}},"__N_SSG":true}