{"pageProps":{"slug":"software-architecture-fundamentals","postData":{"id":"software-architecture-fundamentals","contentHtml":"<h1 id=\"はじめに\">はじめに</h1>\n<p>最近チームでも話題<sup><a href=\"#user-content-fn-comment\" id=\"user-content-fnref-comment\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1</a></sup>になっている<a href=\"https://amzn.to/3KyN3aP\">ソフトウェアアーキテクチャの基礎 ―エンジニアリングに基づく体系的アプローチ</a>を読んだので本の内容を参考にしつつソフトウェアアーキテクチャを考えるためのエッセンスをまとめる。</p>\n<p>この本はアーキテクチャの種類を学ぶというよりはソフトウェアアーキテクトとしての考え方を身につけるための本だ。\nどんな問題でも解決できる完璧なアーキテクチャなどは存在せず全てトレードオフであり、アーキテクトはチームの人数・専門分野・練度などを鑑みて、得られるメリットとリスクを天秤にかけてアーキテクチャを選択する。</p>\n<p>特に小さい会社で CTO をしているとソフトウェアアーキテクトとしての役割の比重も大きく、ビジネス要求の早期実現とプロダクトの長期的な持続性を天秤にかけ、\n取って良いリスクと残すべきでないリスクを選ぶ場面も少なくない。<br>\nこの本はそういった場面で暗黙知的に判断していることを言語化してくれており、どういったポイントをなぜ気にするのかの共通認識を醸成してくれる本である。</p>\n<p>以下ではまずソフトウェアアーキテクチャを考えるために知るべき事に触れ、後にソフトウェアアーキテクトとして振る舞うために意識したいことを挙げる。</p>\n<h1 id=\"ソフトウェアアーキテクチャとは\">ソフトウェアアーキテクチャとは</h1>\n<p>ソフトウェアアーキテクチャを定義するのは以下の要素である。</p>\n<ul>\n<li>システム構造\n<ul>\n<li>アーキテクチャスタイルの種類</li>\n</ul>\n</li>\n<li>アーキテクチャ特性\n<ul>\n<li>システムの成功基準</li>\n</ul>\n</li>\n<li>アーキテクチャ決定\n<ul>\n<li>システムの制約</li>\n</ul>\n</li>\n<li>設計指針\n<ul>\n<li>開発の方針となるガイドライン</li>\n</ul>\n</li>\n</ul>\n<p>\"Done is better than perfect.\"という言葉<sup><a href=\"#user-content-fn-done\" id=\"user-content-fnref-done\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2</a></sup>にある通り、ソフトウェアは動いてこそ価値があり、必要に応じて負債を背負いつつも素早く利用可能な状態のものを構築することは間違っていない。\nしかし、アーキテクチャの指針がないまま「動くから\nOK」という判断基準で開発を進めてしまうと<a href=\"https://ja.wikipedia.org/wiki/%E5%A4%A7%E3%81%8D%E3%81%AA%E6%B3%A5%E3%81%A0%E3%82%93%E3%81%94\">大きな泥団子</a>となり、\n長期的なメンテナンス性を損ない、機能の改修なども必要以上に時間がかかる様になる。<br>\nそういった状態を防ぐために開発者や、特に設計を任される人はソフトウェアアーキテクチャを考えるにあたって何を気にするべきなのかを知る必要がある。</p>\n<h2 id=\"システム構造\">システム構造</h2>\n<p>システム構造とは「ソフトウェアアーキテクチャ」と聞いたときにまずイメージするコードやコンポーネントの構成である。\n本書<code>ソフトウェアアーキテクチャの基礎</code>でも以下に挙げるような主要な構造は挙げられており、それぞれのアーキテクチャの強み・弱みを整理している。</p>\n<ul>\n<li>レイヤードアーキテクチャ</li>\n<li>マイクロカーネルアーキテクチャ</li>\n<li>SoA (サービスベースアーキテクチャ)</li>\n<li>イベント駆動アーキテクチャ</li>\n<li>マイクロサービスアーキテクチャ</li>\n</ul>\n<p>本記事ではシステム構造については深くは触れないが、これについて知りたければ他にも参考にするべき良い本・記事は多くある。\n<code>ソフトウェアアーキテクチャの基礎</code>内ではドメイン駆動設計(DDD)の知識は持っている前提で触れられていたり、\nマイクロサービスアーキテクチャもネットワーク越しでのやり取りの難しさ(リトライの必要性、サーキットブレイク)や分散トランザクションの扱い(二重コミット v.s. Saga パターン)などの前提知識を持っていたほうがアーキテクチャの特徴への理解がよりスムーズになる。</p>\n<p>以下では私がこれまでに触れた、システム構造の理解に役立つであろう参考を挙げる。</p>\n<h3 id=\"レイヤードアーキテクチャ\">レイヤードアーキテクチャ</h3>\n<ul>\n<li><a href=\"https://amzn.to/3s6Qwa0\">Clean Architecture 達人に学ぶソフトウェアの構造と設計</a>\n<ul>\n<li>言わずとしれた Uncle Bob の本</li>\n</ul>\n</li>\n<li><a href=\"https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/\">The Onion Architecture : part 1</a>\n<ul>\n<li>オニオンアーキテクチャについて</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ddd\">DDD</h3>\n<ul>\n<li><a href=\"https://amzn.to/37Sx3Dn\">エリック・エヴァンスのドメイン駆動設計</a>\n<ul>\n<li>DDD の原点。少々抽象的だが、設計パターンの参考として読むと良い</li>\n</ul>\n</li>\n<li><a href=\"https://amzn.to/3OOYDBU\">実践ドメイン駆動設計</a>\n<ul>\n<li>上記エヴァンスの本で論じたことを深堀りし、実装レベルでの理解が深まる</li>\n</ul>\n</li>\n<li><a href=\"https://amzn.to/3vXS1sb\">セキュア・バイ・デザイン</a>\n<ul>\n<li>DDD を用いてセキュアなソフトウェアの設計に触れる</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"マイクロサービスアーキテクチャ\">マイクロサービスアーキテクチャ</h3>\n<ul>\n<li><a href=\"https://amzn.to/3MIEzPR\">モノリスからマイクロサービスへ ―モノリスを進化させる実践移行ガイド</a>\n<ul>\n<li>マイクロサービスというと<a href=\"https://amzn.to/377N7Av\">同じ著者の別書</a>をイメージするかもしれないが、こちらのほうが実践的で現場で実際に悩む様なポイントを抑えている</li>\n</ul>\n</li>\n<li><a href=\"https://docs.microsoft.com/ja-jp/azure/architecture/patterns/\">クラウド設計パターン</a>\n<ul>\n<li>Microsoft が提供しているアーキテクチャガイド。抑えている内容が幅広く素晴らしい</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"その他\">その他</h3>\n<ul>\n<li><a href=\"https://amzn.to/3kwNs2X\">データ指向アプリケーションデザイン ―信頼性、拡張性、保守性の高い分散システム設計の原理</a>\n<ul>\n<li>データの寿命はソフトウェアよりも長く、アーキテクチャ設計ではデータの扱いは必ず意識する。データストアの特性やデータの受け渡しのパターンを抑えるためには必読</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"アーキテクチャ特性\">アーキテクチャ特性</h2>\n<p>アーキテクチャ特性とはシステムの成功基準を定義するもので、システムの機能とは直接関係しない。\n例えば開発者がプロダクトマネージャーや現場の意見ばかり聞いているとボタンの追加や検索機能など目に見える機能の実現ばかりに注力してしまう。<br>\nしかし、システムとして成功するためにはここに挙げられるような特性を意識し取捨選択していかなければいけない。</p>\n<p>ここで挙げられてるアーキテクチャ特性は選んだシステム構造に強く影響され、項目からわかるようにソフトウェア開発者の視点だけでなく、SRE 的な視点を持たないと見落としがちになる。<br>\nソフトウェアアーキテクチャを考えるにはシステムがどう有るべきかを機能・非機能含めて考慮する必要がある。<br>\nここで挙げられるものは <a href=\"https://iso25000.com/index.php/en/iso-25000-standards/iso-25010\">ISO-25000</a> に記述がある。</p>\n<p><strong>運用特性</strong></p>\n<ul>\n<li>可用性</li>\n<li>継続性</li>\n<li>パフォーマンス</li>\n<li>回復性</li>\n<li>信頼性・安全性</li>\n<li>堅牢性\n<ul>\n<li>障害発生時にエラーや境界条件を処理できるか</li>\n</ul>\n</li>\n<li>スケーラビリティ</li>\n</ul>\n<p><strong>構造特性</strong></p>\n<ul>\n<li>構成容易性\n<ul>\n<li>エンドユーザーがかんたんに設定を変更できる</li>\n</ul>\n</li>\n<li>拡張性</li>\n<li>活用性・再利用性</li>\n<li>ローカライゼーション</li>\n<li>メンテナンス容易性</li>\n<li>可搬性\n<ul>\n<li>複数のプラットホームで動作するか</li>\n</ul>\n</li>\n<li>アップグレード容易性</li>\n</ul>\n<p><strong>横断的特性</strong></p>\n<ul>\n<li>アクセシビリティ</li>\n<li>長期保存性 (Archivability)</li>\n<li>認証</li>\n<li>認可</li>\n<li>合法性 (legal)</li>\n<li>プライバシー</li>\n<li>セキュリティ</li>\n<li>サポート容易性</li>\n<li>ユーザビリティ</li>\n<li>耐障害性</li>\n<li>テスト容易性</li>\n<li>デプロイ容易性</li>\n<li>アジリティ</li>\n<li>セキュリティ</li>\n</ul>\n<h2 id=\"アーキテクチャ決定\">アーキテクチャ決定</h2>\n<p>アーキテクチャ決定とはどのようにシステムを構築するのかを実装レベルで考え、ルール化することである。<br>\n例えば、レイヤードアーキテクチャで構築する場合はビジネス層とサービス層のみデータベースにアクセスでき、プレゼンテーション層からは不可視にしたり、DDD であればリポジトリ層をデータへアクセスするためのインターフェースにする。\nそして決定した方針をメンバーに順守させる。</p>\n<p>システム構造を一貫性を持って実現するためには、アーキテクチャの根幹となる部分はある程度ルール化して必ず守るべきものとして共有するべきである。</p>\n<h2 id=\"設計指針\">設計指針</h2>\n<p>設計指針は開発におけるガイドラインを提供することである。\nアーキテクチャで決定では、決定した方針を順守させるがプロダクト全体で細かく具体的な方法をアーキテクトが示すのは非効率である。\n設計指針として具体的な方法を示すより、望ましいアプローチの方向性を示すことで開発チームが特定の状況下で適切な選択が行えるようにする。</p>\n<h1 id=\"ソフトウェアアーキテクト\">ソフトウェアアーキテクト</h1>\n<p>これまでにソフトウェアアーキテクチャを選び、それを実現するために必要な項目の知識に触れた。\nここからは、得た知識を基にソフトウェアアーキテクトとして考えるべき事に触れる。</p>\n<h2 id=\"ソフトウェアアーキテクトに期待すること\">ソフトウェアアーキテクトに期待すること</h2>\n<p>ソフトウェアアーキテクトはソフトウェアに向き合うだけでは役割の半分も達成できない。\nソフトウェアアーキテクトとして振る舞うためにはアーキテクチャの種類や特徴の理解に加えて、作るものが何を達成したいのかを非エンジニア視点で理解するためにステークホルダーとの折衝、\n開発のルールをチームに守らせるといった対人スキルも重要となる。</p>\n<p>以下にソフトウェアアーキテクトが期待されていることを例示する。</p>\n<ul>\n<li>アーキテクチャ決定</li>\n<li>アーキテクチャを継続的に分析</li>\n<li>最新のトレンドを把握</li>\n<li>決定の順守を徹底</li>\n<li>多様なものに触れ経験している</li>\n<li>事業ドメインの知識を持っている</li>\n<li>対人スキル</li>\n<li>(社内)政治を理解する</li>\n</ul>\n<h2 id=\"ビジネスドライバーの理解\">ビジネスドライバーの理解</h2>\n<p>アーキテクトらしく考えるためにはシステムの成功に必要なビジネスドライバーを理解する必要がある。<br>\nアーキテクチャ特性の部分ではシステムの要求毎に重要視するべき特性が異なる事に触れた。\nこの選択をするためにはソフトウェアアーキテクトがビジネスドメインの知識を持ち、ステークホルダーの期待値を理解する必要がある。</p>\n<h3 id=\"ドメインの関心事\">ドメインの関心事</h3>\n<p>システムに必要なアーキテクチャの特性はドメインの関心事を整理することで定義できる。以下に例を示す。</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">ドメインの関心事</th><th align=\"center\">求められるアーキテクチャ特性</th></tr></thead><tbody><tr><td align=\"left\">市場投入までの時間</td><td align=\"center\">アジリティ・テスト容易性・デプロイ容易性</td></tr><tr><td align=\"left\">ユーザー満足度</td><td align=\"center\">パフォーマンス・可用性・耐障害性・テスト容易性・デプロイ容易性・セキュリティ</td></tr><tr><td align=\"left\">競争優位性</td><td align=\"center\">アジリティ・テスト容易性・デプロイ容易性・スケーラビリティ・可用性・耐障害</td></tr><tr><td align=\"left\">合弁・買収</td><td align=\"center\">相互運用性・スケーラビリティ・適応性・拡張性</td></tr></tbody></table>\n<p>資金の限られたスタートアップなどではとにかく素早い製品の市場投入やフィードバックを元にした改善が求められるため、アジリティや手早くバージョン更新が行いやすいアーキテクチャが必要となる。\n一方で、時間的・人的リソースのある大企業が既存プロダクトの上位互換で価格は高くとも良いものを提供しようと考えるのであれば、パフォーマンスや可用性・セキュリティの高さなどの特性を特に重視したアーキテクチャを構築するべきだろう。</p>\n<h2 id=\"アーキテクチャ決定-1\">アーキテクチャ決定</h2>\n<p>ソフトウェアアーキテクトはあらゆる情報を整理した上でアーキテクチャを決定しなければいけない。</p>\n<h3 id=\"architecture-decision-records-adr\">Architecture Decision Records (ADR)</h3>\n<p>アーキテクチャを決定する時は <a href=\"https://adr.github.io/\">ADR</a> を残すことが望ましい。ADR は特定のアーキテクチャを決定した短いテキストファイルで構成される。</p>\n<p>ADR は Markdown などで以下のような項目を記述する。</p>\n<ol>\n<li>タイトル</li>\n<li>ステータス\n<ul>\n<li>提案済み</li>\n<li>承認済み</li>\n<li>破棄</li>\n</ul>\n</li>\n<li>コンテキスト\n<ul>\n<li>決定を行った状況</li>\n</ul>\n</li>\n<li>決定\n<ul>\n<li>決定と根拠</li>\n</ul>\n</li>\n<li>影響\n<ul>\n<li>決定による影響</li>\n</ul>\n</li>\n<li>コンプライアンスへ\n<ul>\n<li>この決定が順守されていることを確認する方法</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"アンチパターン\">アンチパターン</h3>\n<p>アーキテクチャを決定するときに陥りがちなアンチパターンがある。いかに挙げるものは現実に起こりうるため、アーキテクトは特に意識したい。</p>\n<h4 id=\"資産防御covering-your-assets\">資産防御(Covering Your Assets)</h4>\n<p>選択を誤ることを恐れてアーキテクチャ決定を先延ばしにすること。</p>\n<p>克服するためには、2 つの案がある。</p>\n<ol>\n<li>重要な決定は最終責任時点まで先延ばしにし、検証するのに必要な情報が得られるまでは決定を遅らせる。ただし、開発チームをまたせたり、分析麻痺<sup><a href=\"#user-content-fn-analysis\" id=\"user-content-fnref-analysis\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">3</a></sup>に陥るほど先延ばしてはいけない</li>\n<li>決定したことが期待通りに実装できるよう開発チームに継続的に強力すること。アーキテクトがすべてを把握するのは不可能なため、開発チームと密に連携して問題が発生してもアーキテクチャ決定を変更して問題に迅速に対応できるようにする</li>\n</ol>\n<h4 id=\"グラウンドホッグデー-groundhog-day\">グラウンドホッグデー (Groundhog Day)</h4>\n<p>ある決定がされたにも関わらず理由がわからないため何度も繰り返し議論されること。</p>\n<p>アーキテクチャ決定の際にその根拠をっ示さないために発生するため、克服するためには技術的な理由・ビジネス的な理由の両方を残すことが必要。</p>\n<h4 id=\"メール駆動アーキテクチャ\">メール駆動アーキテクチャ</h4>\n<p>電子メールなどで重要な決定が行われており、周りがアーキテクチャ決定を見失ったり、忘れたり、決定されたことさえ知らないこと。</p>\n<p>電子メールやメッセージングツールなど会話が流れるような場ではなく Wiki など長期的に参照されることが期待される場に ADR に準じたドキュメントを残す事が必要。</p>\n<h3 id=\"アーキテクチャのリスク\">アーキテクチャのリスク</h3>\n<p>アーキテクチャ決定する為にはアーキテクチャごとのリスクの整理が必要となる。</p>\n<p>まず以下の項目を組み合わせたマトリクスによってリスクポイントを定義する。</p>\n<ol>\n<li>リスクの全体的な影響</li>\n<li>リスク発生の可能性</li>\n</ol>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">1\\2</th><th align=\"center\">低</th><th align=\"center\">中</th><th align=\"center\">高</th></tr></thead><tbody><tr><td align=\"left\">低</td><td align=\"center\">1</td><td align=\"center\">2</td><td align=\"center\">3</td></tr><tr><td align=\"left\">中</td><td align=\"center\">1</td><td align=\"center\">4</td><td align=\"center\">6</td></tr><tr><td align=\"left\">高</td><td align=\"center\">3</td><td align=\"center\">6</td><td align=\"center\">9</td></tr></tbody></table>\n<p>次に (a)アーキテクチャ特性と (b)システムが持つべき機能 のマトリクスを作ることで各機能(もしくはコンポーネント)毎のリスクを整理する。</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">(a) \\ (b)</th><th align=\"center\">顧客登録</th><th align=\"center\">商品表示</th><th align=\"center\">注文</th></tr></thead><tbody><tr><td align=\"left\">スケーラビリティ</td><td align=\"center\">2</td><td align=\"center\">9</td><td align=\"center\">3</td></tr><tr><td align=\"left\">セキュリティ</td><td align=\"center\">9</td><td align=\"center\">1</td><td align=\"center\">6</td></tr><tr><td align=\"left\">完全性</td><td align=\"center\">6</td><td align=\"center\">3</td><td align=\"center\">9</td></tr></tbody></table>\n<p>この結果により、選んだアーキテクチャとリスクの精査を行い、リスクの軽減のための改善が必要なのか、リスクが適格なのかをチームで合意しアーキテクチャを決定する。</p>\n<h2 id=\"ソフトスキル\">ソフトスキル</h2>\n<p>アーキテクトは技術的なアーキテクチャの構築や決定に加えて、開発チームがアーキテクチャの実装ができるようガイドする必要がある。\nアーキテクトと開発チームが分断されていると目指しているアーキテクチャの実現は難しくなる。</p>\n<p>ソフトウェアアーキテクトの役割はは実装の制約を定義し伝えることだが、制約をきつくしすぎて開発チームのフラストレーションをためてはいけないし、\n緩くして統制が取れなくなってもいけない。</p>\n<p>アーキテクトが実装から離れすぎていると「アームチェアアーキテクト」と呼ばれ、トレンドに鈍感になったり、実際の詳細を考慮に入れずにアーキテクチャ決定を行ってしまったりする。\n逆に実装に張り付いてしまうと全体を俯瞰できなくなってしまうため、そのバランスが必要となる。\nまた、ソフトウェアアーキテクトが PoC のつもりで実装し提供するものは開発チームからはリファレンス実装のように扱われてしまうことが多い。\nアーキテクトは実装するのであればプロダクションクオリティのものを意識するべきである。</p>\n<p>加えて、ソフトウェアアーキテクトはアーキテクチャの実装を通して開発チームをガイドするためにリーダーシップを発揮する必要がある。\nステークホルダーとの折衝も必要であり、ピープルスキル・ファシリテーションスキル・ネゴシエーションスキルも必要となる。\nまたアーキテクトはドキュメンテーションの機会も多く、役割をこなすためには4つの<code>C</code>を意識する</p>\n<ul>\n<li>Communication</li>\n<li>Clarity</li>\n<li>Conciseness</li>\n<li>Collaboration</li>\n</ul>\n<h1 id=\"おわりに\">おわりに</h1>\n<p>本記事では<a href=\"https://amzn.to/3KyN3aP\">ソフトウェアアーキテクチャの基礎 ―エンジニアリングに基づく体系的アプローチ</a>の内容を元に自身が普段意識していることも含めつつ、\nソフトウェアアーキテクトとなるために必要な知識や考え方に触れた。<br>\n本記事の内容はアーキテクトと呼ばれる人だけのためのものではなく、開発チームの一員としてコードを書くことが主の開発者にも有効なものだと思う。\n開発者は日々プロジェクトの中で大小の選択を行っているはずであり、その選択の結果としてアーキテクチャ特性にどの様な影響を与えるのか、\nシステムに求められている特性に沿った結果が得られるものなのかを考えられるようになるとレベルの高い開発者と呼ばれるようになると期待できる。</p>\n<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-comment\">\n<p>チームメンバーに「普段ttyさんが言っていることが書いてる」と言う人がいれば、「この本の最初の方がよくわからない」と言う人も居る。先述の発言と合わせると普段私の言っていることをよくわかっていないのか?と少々不安になった <a href=\"#user-content-fnref-comment\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n<li id=\"user-content-fn-done\">\n<p>この言葉を作る側が言うのは言い訳のようで好ましくはない <a href=\"#user-content-fnref-done\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n<li id=\"user-content-fn-analysis\">\n<p>過度に分析しすぎ、解決策や行動方針が決まらない状態に陥ること <a href=\"#user-content-fnref-analysis\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n</ol>\n</section>","title":"ソフトウェアアーキテクチャの基礎を受けてアーキテクトのあり方を整理","date":"2022-05-03","tags":["architecture"],"description":"「ソフトウェアアーキテクチャの基礎」を受けてソフトウェアアーキテクトとして理解するべきことに触れる","published":true,"company":false}},"__N_SSG":true}